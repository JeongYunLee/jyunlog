[{"data":1,"prerenderedAt":222},["Reactive",2],{"content-/blog/2023-05-01-git":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"_empty":6,"title":8,"description":9,"date":10,"tags":11,"draft":6,"summary":14,"body":15,"_type":217,"_id":218,"_source":219,"_file":220,"_extension":221},"/blog/2023-05-01-git","blog",false,"","터미널에서 사용하는 github 명령어","오랫동안 깃헙 웹 사이트로 데이터를 올리고 수정하거나 github desktop을 사용했었는데, vscode로 점점 더 많은 수정할 것들이 생기니 터미널을 사용하는 것이 훨씬 편리하다는 것을 알게되었다. 자주 사용하지만 그래도 자꾸 까먹는 깃헙 터미널 명령어들을 기록해 둔다.","2023-05-01",[12,13],"GitHub","terminal","자주 사용하는 github 터미널 명령어를 정리한 것 입니다.",{"type":16,"children":17,"toc":207},"root",[18,25,32,43,49,73,79,89,95,106,136,142,159,170,176,181],{"type":19,"tag":20,"props":21,"children":22},"element","p",{},[23],{"type":24,"value":9},"text",{"type":19,"tag":26,"props":27,"children":29},"h3",{"id":28},"_1-git-clone",[30],{"type":24,"value":31},"1. git clone",{"type":19,"tag":20,"props":33,"children":34},{},[35,41],{"type":19,"tag":36,"props":37,"children":38},"code-inline",{},[39],{"type":24,"value":40},"git clone [레포 경로]",{"type":24,"value":42},"는 원하는 레포를 로컬에 저장하고 싶을 때 사용한다.",{"type":19,"tag":26,"props":44,"children":46},{"id":45},"_2-git-checkout",[47],{"type":24,"value":48},"2. git checkout",{"type":19,"tag":20,"props":50,"children":51},{},[52,57,59,64,66,71],{"type":19,"tag":36,"props":53,"children":54},{},[55],{"type":24,"value":56},"git checkout [브랜치 이름]",{"type":24,"value":58}," 브랜치 생성은 그냥 웹에서 해도 편하다. ",{"type":19,"tag":36,"props":60,"children":61},{},[62],{"type":24,"value":63},"git checkout -v",{"type":24,"value":65},"를 하면 현재 연결된 브랜치를 확인할 수 있다. 가끔 웹에서 생성한 브랜치가 보이지 않는다면 ",{"type":19,"tag":36,"props":67,"children":68},{},[69],{"type":24,"value":70},"git remote update",{"type":24,"value":72},"을 해주면 정상적으로 나올 것이다.",{"type":19,"tag":26,"props":74,"children":76},{"id":75},"_3-git-pull-origin-main",[77],{"type":24,"value":78},"3. git pull origin main",{"type":19,"tag":20,"props":80,"children":81},{},[82,87],{"type":19,"tag":36,"props":83,"children":84},{},[85],{"type":24,"value":86},"git pull origin main",{"type":24,"value":88}," 습관화할 것!! 해당 레포의 main을 불러온다. 협업해서 코드를 수정할 때, main을 가져오지 않고 내 것만 푸시해서 머지하면 상대방이 수정한 것이 날아갈 수도 있다...(잦은 경험...) 꼭 main을 pull 하고, 만약 내가 수정한 것과 이미 conflict가 난다면 push 후에 꼭 상대의 수정 사항등을 확인해준다.",{"type":19,"tag":26,"props":90,"children":92},{"id":91},"_4-push-스텝",[93],{"type":24,"value":94},"4. push 스텝",{"type":19,"tag":20,"props":96,"children":97},{},[98,100,104],{"type":24,"value":99},"push 할 때는 다음과 같은 순서를 꼭 따른다. ",{"type":19,"tag":36,"props":101,"children":102},{},[103],{"type":24,"value":86},{"type":24,"value":105},"을 해서 main을 가져왔다고 가정했을 때,",{"type":19,"tag":107,"props":108,"children":109},"ol",{},[110,121,126],{"type":19,"tag":111,"props":112,"children":113},"li",{},[114,119],{"type":19,"tag":36,"props":115,"children":116},{},[117],{"type":24,"value":118},"git add .",{"type":24,"value":120},"\n수정한 내용 전체를 가져오는 코드",{"type":19,"tag":111,"props":122,"children":123},{},[124],{"type":24,"value":125},"`git commit -m \"간단한 commit message\" 작성\n수정한 내용에 대한 간단한 설명 작성 (나중에 revert 하거나 에러 확인할 때 어느 부분인지 알기 위해서 직관적으로 적어주는 것이 좋음)",{"type":19,"tag":111,"props":127,"children":128},{},[129,134],{"type":19,"tag":36,"props":130,"children":131},{},[132],{"type":24,"value":133},"git push",{"type":24,"value":135},"\nmain에 수정한 내용 push 하기",{"type":19,"tag":26,"props":137,"children":139},{"id":138},"_5-pull-request-merge-스텝",[140],{"type":24,"value":141},"5. pull request & merge 스텝",{"type":19,"tag":20,"props":143,"children":144},{},[145,147,151,157],{"type":24,"value":146},"위 4번 스텝을 차례로 진행한 뒤, github 웹 사이트의 해당 레포로 돌아온다. push한 브랜치에 들어가서 contribute 버튼을 눌렀을 때 'open pull request' 버튼이 활성화 된다면 제대로 push 된 것이다. 아래는 push 한 것이 없어서, 즉 main과 브랜치가 동일해서 버튼 활성화가 안된 상태이다.",{"type":19,"tag":148,"props":149,"children":150},"br",{},[],{"type":19,"tag":152,"props":153,"children":156},"img",{"alt":154,"src":155},"open-pull-request","/images/blogImg/2023-05-01-1.png",[],{"type":24,"value":158},"\n이후 pull request를 실행하고 잠깐의 로딩 후, merge 버튼이 활성화되면서 보라색으로 바뀐다. 이때 conflict라는 에러가 나면 resolve conflict 버튼이 활성화되는데, 여기로 들어가서 충돌나는 코드를 고쳐주고 (이 부분에 대한 설명은 불가... conflict나는 코드를 하나씩 보면서 지워나가는 방법 밖에 없기 때문에!) merge를 하면 되고, 충돌이 안난다면 그냥 merge 해주면 된다.",{"type":19,"tag":20,"props":160,"children":161},{},[162,164,168],{"type":24,"value":163},"merge 후 다시 vscode로 돌아와서 ",{"type":19,"tag":36,"props":165,"children":166},{},[167],{"type":24,"value":86},{"type":24,"value":169}," 했을 때 'Fast-forward' 라고 뜨면 정상적으로 main에 반영된 것이다.",{"type":19,"tag":26,"props":171,"children":173},{"id":172},"_6-사용하고-있는-브랜치를-main으로-덮어-쓰고-싶은-경우",[174],{"type":24,"value":175},"6. 사용하고 있는 브랜치를 main으로 덮어 쓰고 싶은 경우",{"type":19,"tag":20,"props":177,"children":178},{},[179],{"type":24,"value":180},"가끔 수정하다가 돌이킬 수 없는 경우가 되었을 때 (=망했을 때) 그냥 main으로 브랜치를 덮어쓰고 싶은 경우가 생긴다. 아래의 스텝에 따라서 진행하면 깔끔하게 덮어쓸 수 있다.",{"type":19,"tag":107,"props":182,"children":183},{},[184,192,200],{"type":19,"tag":111,"props":185,"children":186},{},[187],{"type":19,"tag":36,"props":188,"children":189},{},[190],{"type":24,"value":191},"git fetch origin",{"type":19,"tag":111,"props":193,"children":194},{},[195],{"type":19,"tag":36,"props":196,"children":197},{},[198],{"type":24,"value":199},"git reset --hard main",{"type":19,"tag":111,"props":201,"children":202},{},[203],{"type":19,"tag":36,"props":204,"children":205},{},[206],{"type":24,"value":86},{"title":7,"searchDepth":208,"depth":208,"links":209},2,[210,212,213,214,215,216],{"id":28,"depth":211,"text":31},3,{"id":45,"depth":211,"text":48},{"id":75,"depth":211,"text":78},{"id":91,"depth":211,"text":94},{"id":138,"depth":211,"text":141},{"id":172,"depth":211,"text":175},"markdown","content:blog:2023-05-01-git.md","content","blog/2023-05-01-git.md","md",1703393643785]